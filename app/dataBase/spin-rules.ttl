@prefix pdx: <http://poked-x.org/pokemon/> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://poked-x.org/pokemon/rule/InferHasSameTypeAs> a spin:Rule ;
    spin:body pdx:construct3 .

<http://poked-x.org/pokemon/rule/InferLegendaryPokemon> a spin:Rule ;
    spin:body pdx:construct1 .

<http://poked-x.org/pokemon/rule/InferStrongAgainst> a spin:Rule ;
    spin:body pdx:construct2 .

<http://poked-x.org/pokemon/rule/InferStrongestMatchAgainst> a spin:Rule ;
    spin:body pdx:construct10 .

<http://poked-x.org/pokemon/rule/InferWeakestMatchAgainst> a spin:Rule ;
    spin:body pdx:construct11 .

pdx:construct1 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?pokemon a pdx:LegendaryPokemon .
    }
    WHERE {
        ?pokemon pdx:isLegendary true .
    }
"""^^xsd:string .

pdx:construct2 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?type1 pdx:strongAgainst ?type2 .
    }
    WHERE {
        ?type1 pdx:effectiveAgainst ?type2 ;
               pdx:effectiveness ?value .
        FILTER (?value > 1.5)
    }
"""^^xsd:string .

pdx:construct3 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?p1 pdx:hasSameTypeAs ?p2 .
    }
    WHERE {
        ?p1 pdx:primaryType ?type .
        ?p2 pdx:primaryType ?type .
        FILTER (?p1 != ?p2)
    }
"""^^xsd:string .

<http://poked-x.org/pokemon/rule/InferStrongPokemon> a spin:Rule ;
    spin:body pdx:construct5 .

<http://poked-x.org/pokemon/rule/InferOldGeneration> a spin:Rule ;
    spin:body pdx:construct6 .

<http://poked-x.org/pokemon/rule/InferSharedPrimaryType> a spin:Rule ;
    spin:body pdx:construct7 .

<http://poked-x.org/pokemon/rule/InferFastPokemon> a spin:Rule ;
    spin:body pdx:construct8 .

<http://poked-x.org/pokemon/rule/InferMixedType> a spin:Rule ;
    spin:body pdx:construct9 .

pdx:construct5 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?pokemon pdx:isStrong true .
    }
    WHERE {
        ?pokemon pdx:spAttack ?atk .
        FILTER (?atk > 120)
    }
"""^^xsd:string .

pdx:construct6 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?pokemon pdx:isFromOldGen true .
    }
    WHERE {
        ?pokemon pdx:generation ?gen .
        FILTER (?gen <= 3)
    }
"""^^xsd:string .

pdx:construct7 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?p1 pdx:sharesPrimaryTypeWith ?p2 .
    }
    WHERE {
        ?p1 pdx:primaryType ?type .
        ?p2 pdx:primaryType ?type .
        FILTER (?p1 != ?p2)
    }
"""^^xsd:string .

pdx:construct8 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?pokemon pdx:isFast true .
    }
    WHERE {
        ?pokemon pdx:speed ?spd .
        FILTER (?spd >= 100)
    }
"""^^xsd:string .

pdx:construct9 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?pokemon pdx:isMixedType true .
    }
    WHERE {
        ?pokemon pdx:primaryType ?t1 .
        ?pokemon pdx:secondaryType ?t2 .
        FILTER (?t1 != ?t2)
    }
"""^^xsd:string .


pdx:construct10_simple a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?pokemon pdx:strongestMatchAgainst ?strongestOpponent .
    }
    WHERE {
        # Para cada Pokémon, encontrar seu oponente mais forte
        ?pokemon pdx:primaryType ?pokemonType ;
                 pdx:defense ?pokemonDef ;
                 pdx:spDefense ?pokemonSpDef .
        
        # Encontrar oponentes que são super efetivos contra este Pokémon
        ?opponent pdx:primaryType ?opponentType ;
                  pdx:attack ?oppAttack ;
                  pdx:spAttack ?oppSpAttack .
        
        FILTER(?pokemon != ?opponent)
        
        # Verificar efetividade do oponente contra o Pokémon
        ?eff pdx:attackingType ?opponentType ;
             pdx:defendingType ?pokemonType ;
             pdx:effectiveness ?effValue .
        FILTER(?effValue >= 2.0)
        
        # Calcular "força" do oponente (stats ofensivos altos)
        BIND((?oppAttack + ?oppSpAttack) AS ?opponentPower)
        
        # Selecionar apenas o oponente mais forte
        {
            SELECT ?pokemon (MAX(?opponentPower) AS ?maxPower) WHERE {
                ?pokemon pdx:primaryType ?pokemonType .
                ?opponent pdx:primaryType ?opponentType ;
                          pdx:attack ?oppAttack ;
                          pdx:spAttack ?oppSpAttack .
                FILTER(?pokemon != ?opponent)
                
                ?eff pdx:attackingType ?opponentType ;
                     pdx:defendingType ?pokemonType ;
                     pdx:effectiveness ?effValue .
                FILTER(?effValue >= 2.0)
                
                BIND((?oppAttack + ?oppSpAttack) AS ?opponentPower)
            }
            GROUP BY ?pokemon
        }
        
        # Garantir que pegamos o oponente com o poder máximo
        FILTER((?oppAttack + ?oppSpAttack) = ?maxPower)
        BIND(?opponent AS ?strongestOpponent)
    }
"""^^xsd:string .

pdx:construct11_simple a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?pokemon pdx:weakestMatchAgainst ?weakestOpponent .
    }
    WHERE {
        # Para cada Pokémon, encontrar seu oponente mais fraco
        ?pokemon pdx:primaryType ?pokemonType ;
                 pdx:attack ?pokemonAttack ;
                 pdx:spAttack ?pokemonSpAttack .
        
        # Encontrar oponentes que são resistentes ou imunes aos ataques deste Pokémon
        ?opponent pdx:primaryType ?opponentType ;
                  pdx:defense ?oppDef ;
                  pdx:spDefense ?oppSpDef .
        
        FILTER(?pokemon != ?opponent)
        
        # Verificar efetividade do Pokémon contra o oponente (baixa efetividade)
        ?eff pdx:attackingType ?pokemonType ;
             pdx:defendingType ?opponentType ;
             pdx:effectiveness ?effValue .
        FILTER(?effValue <= 0.5)
        
        # Calcular "resistência" do oponente (stats defensivos altos)
        BIND((?oppDef + ?oppSpDef) AS ?opponentResistance)
        
        # Selecionar apenas o oponente mais resistente (mais difícil de derrotar)
        {
            SELECT ?pokemon (MAX(?opponentResistance) AS ?maxResistance) WHERE {
                ?pokemon pdx:primaryType ?pokemonType .
                ?opponent pdx:primaryType ?opponentType ;
                          pdx:defense ?oppDef ;
                          pdx:spDefense ?oppSpDef .
                FILTER(?pokemon != ?opponent)
                
                ?eff pdx:attackingType ?pokemonType ;
                     pdx:defendingType ?opponentType ;
                     pdx:effectiveness ?effValue .
                FILTER(?effValue <= 0.5)
                
                BIND((?oppDef + ?oppSpDef) AS ?opponentResistance)
            }
            GROUP BY ?pokemon
        }
        
        # Garantir que pegamos o oponente com a resistência máxima
        FILTER((?oppDef + ?oppSpDef) = ?maxResistance)
        BIND(?opponent AS ?weakestOpponent)
    }
"""^^xsd:string .