@prefix pdx: <http://poked-x.org/pokemon/> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://poked-x.org/pokemon/rule/InferHasSameTypeAs> a spin:Rule ;
    spin:body pdx:construct3 .

<http://poked-x.org/pokemon/rule/InferLegendaryPokemon> a spin:Rule ;
    spin:body pdx:construct1 .

<http://poked-x.org/pokemon/rule/InferStrongAgainst> a spin:Rule ;
    spin:body pdx:construct2 .

<http://poked-x.org/pokemon/rule/InferBestMatchAgainst> a spin:Rule ;
    spin:body pdx:construct10 .
    

pdx:construct1 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?pokemon a pdx:LegendaryPokemon .
    }
    WHERE {
        ?pokemon pdx:isLegendary true .
    }
"""^^xsd:string .

pdx:construct2 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?type1 pdx:strongAgainst ?type2 .
    }
    WHERE {
        ?type1 pdx:effectiveAgainst ?type2 ;
               pdx:effectiveness ?value .
        FILTER (?value > 1.5)
    }
"""^^xsd:string .

pdx:construct3 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?p1 pdx:hasSameTypeAs ?p2 .
    }
    WHERE {
        ?p1 pdx:primaryType ?type .
        ?p2 pdx:primaryType ?type .
        FILTER (?p1 != ?p2)
    }
"""^^xsd:string .

<http://poked-x.org/pokemon/rule/InferStrongPokemon> a spin:Rule ;
    spin:body pdx:construct5 .

<http://poked-x.org/pokemon/rule/InferOldGeneration> a spin:Rule ;
    spin:body pdx:construct6 .

<http://poked-x.org/pokemon/rule/InferSharedPrimaryType> a spin:Rule ;
    spin:body pdx:construct7 .

<http://poked-x.org/pokemon/rule/InferFastPokemon> a spin:Rule ;
    spin:body pdx:construct8 .

<http://poked-x.org/pokemon/rule/InferMixedType> a spin:Rule ;
    spin:body pdx:construct9 .

pdx:construct5 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?pokemon pdx:isStrong true .
    }
    WHERE {
        ?pokemon pdx:spAttack ?atk .
        FILTER (?atk > 120)
    }
"""^^xsd:string .

pdx:construct6 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?pokemon pdx:isFromOldGen true .
    }
    WHERE {
        ?pokemon pdx:generation ?gen .
        FILTER (?gen <= 3)
    }
"""^^xsd:string .

pdx:construct7 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?p1 pdx:sharesPrimaryTypeWith ?p2 .
    }
    WHERE {
        ?p1 pdx:primaryType ?type .
        ?p2 pdx:primaryType ?type .
        FILTER (?p1 != ?p2)
    }
"""^^xsd:string .

pdx:construct8 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?pokemon pdx:isFast true .
    }
    WHERE {
        ?pokemon pdx:speed ?spd .
        FILTER (?spd >= 100)
    }
"""^^xsd:string .

pdx:construct9 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?pokemon pdx:isMixedType true .
    }
    WHERE {
        ?pokemon pdx:primaryType ?t1 .
        ?pokemon pdx:secondaryType ?t2 .
        FILTER (?t1 != ?t2)
    }
"""^^xsd:string .

pdx:construct10 a sp:Construct ;
    sp:text """
    CONSTRUCT {
        ?attacker pdx:bestMatchAgainst ?target .
        ?attacker pdx:matchStrength ?strength .
    }
    WHERE {
        # Get target Pokemon and its types
        ?target pdx:primaryType ?targetType1 .
        OPTIONAL { ?target pdx:secondaryType ?targetType2 . }
        
        # Get potential attacker Pokemon (different from target)
        ?attacker pdx:primaryType ?attackerType1 .
        ?attacker pdx:attack ?attack .
        ?attacker pdx:spAttack ?spAttack .
        FILTER (?attacker != ?target)
        
        # Calculate type effectiveness
        OPTIONAL {
            ?eff1 pdx:attackingType ?attackerType1 ;
                   pdx:defendingType ?targetType1 ;
                   pdx:effectiveness ?eff1Value .
        }
        OPTIONAL {
            ?eff2 pdx:attackingType ?attackerType1 ;
                   pdx:defendingType ?targetType2 ;
                   pdx:effectiveness ?eff2Value .
        }
        
        # Get attacker's secondary type effectiveness if exists
        OPTIONAL { ?attacker pdx:secondaryType ?attackerType2 . }
        OPTIONAL {
            ?eff3 pdx:attackingType ?attackerType2 ;
                   pdx:defendingType ?targetType1 ;
                   pdx:effectiveness ?eff3Value .
        }
        OPTIONAL {
            ?eff4 pdx:attackingType ?attackerType2 ;
                   pdx:defendingType ?targetType2 ;
                   pdx:effectiveness ?eff4Value .
        }
        
        # Calculate total effectiveness (default to 1.0 if no effectiveness found)
        BIND(COALESCE(?eff1Value, 1.0) as ?e1)
        BIND(COALESCE(?eff2Value, 1.0) as ?e2)
        BIND(COALESCE(?eff3Value, 1.0) as ?e3)
        BIND(COALESCE(?eff4Value, 1.0) as ?e4)
        
        # Calculate average effectiveness across all type matchups
        BIND(IF(BOUND(?targetType2), 
            IF(BOUND(?attackerType2), (?e1 + ?e2 + ?e3 + ?e4) / 4, (?e1 + ?e2) / 2),
            IF(BOUND(?attackerType2), (?e1 + ?e3) / 2, ?e1)
        ) as ?typeEffectiveness)
        
        # Calculate combined attack power
        BIND((?attack + ?spAttack) as ?totalAttack)
        
        # Calculate final strength score
        BIND(?typeEffectiveness * ?totalAttack as ?strength)
        
        # Only include if there's some advantage (effectiveness > 1.0 or high stats)
        FILTER(?typeEffectiveness > 1.0 || ?totalAttack > 150)
    }
"""^^xsd:string .